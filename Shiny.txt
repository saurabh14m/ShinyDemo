In reality, Shiny is very accommodating, and you will find that it will quite happily
accept a mix of Shiny and HTML code produced by you using Shiny helper
functions, and the raw HTML written by you.

\end{frame}
%------------------------------------------------------%
\begin{frame}

I have
also included the HTML() function which marks text strings as HTML, avoiding the
HTML escaping, which would otherwise render this on the screen verbatim.
The other new part of this file is the htmlOutput() function. This, like the HTML()
function, prevents HTML escaping and allows you to use your own markup, but this
time for text passed from server.R.



\end{frame}
%------------------------------------------------------%
\begin{frame}

\frametitle{Minimal HTML interface}
\begin{itemize}
\item Now that we have dipped our toes into HTML, let's build a (nearly) minimal
example of an interface entirely in HTML. To use your own HTML in a Shiny
application, create the server.R file as you normally would. 

\item Then, instead of
a ui.R file, create a folder called www and place a file called index.html inside
this folder. This is where you will define your interface.

\item The <head> section contains some important setup for Shiny, loading the JavaScript
and jQuery scripts which make it work, as well as a stylesheet for Shiny. You will
need to add some CSS of your own unless you want every element of the interface
and output to be displayed as a big list down the screen, and the whole thing to look
very ugly. 
\item For simplicity, I've added some very basic CSS in the <head> section; you
could, of course, use a separate CSS file and add a link to it just as shiny.css
is referenced.
\end{itemize}
\end{frame}
%------------------------------------------------------%
\begin{frame}[fragile]

\begin{framed}
\begin{verbatim}
<head>
<title>HTML minimal example</title>
<script src="shared/jquery.js" type="text/javascript"></script>
<script src="shared/shiny.js" type="text/javascript"></script>
<link rel="stylesheet" type="text/css" href="shared/shiny.css"/>
<style type = "text/css">
body {
....
....
}
</style>
</head>
\end{verbatim}
\end{framed}


\end{frame}
%------------------------------------------------------%
\begin{frame}
\frametitle{Body}
\begin{itemize}
\item There are three main elements: a title and two <div> sections, one for the UI and one
for the output. The UI is defined within the navigation <div>, which is left aligned.
Recreating Shiny widgets in HTML is pretty simple and you can also use HTML
elements that are not given in Shiny. 
\item Instead of replacing the textInput() widget
with <input type="text"> (which is equivalent), I have instead used <textarea>,
which allows more control over the size and shape of the input area.
\end{itemize}
\end{frame}
%------------------------------------------------------%
\begin{frame}
\begin{itemzie}
\item The radioButtons() widget can be recreated with <input type = "radio">. You
can see that both get a name attribute, which is referenced in the server.R file as
input$name (in this case, input$comment and input$graph). \item Another advantage
of using your own HTML is you can add tooltips; I have added these to the radio
buttons using the title attribute.
\end{itemize}
\end{frame}
%------------------------------------------------------%
\begin{frame}
The output region is set up with two <div> tags: one which is named textDisplay
and picks up output$textDisplay as defined in server.R; and the other which is
named plotDisplay and picks up output$plotDisplay from the server.R file. In
your own code, you will need to specify the class as shown in the previous example,
as either shiny-text-output (for text), shiny-plot-output (for plots), or shinyhtml-
output (for tables or anything else that R will output as HTML). 
\end{frame}
%------------------------------------------------------%
\begin{frame}
You will need
to specify the height of plots (in px, cm, and so on) and can optionally specify width
either in absolute or relative (%) terms.
\end{frame}
%------------------------------------------------------%
\begin{frame}
Just to demonstrate that you can throw anything in there that you like, there's a
picture of my cats underneath the UI. You will, of course, have something a bit more
sophisticated in mind. Add more <div> sections, l
